; Inno Setup Script for PDF Page Extractor with NAPS2 Scanner Integration
; Generated by build script

#define MyAppName "PDF Page Extractor"
#define MyAppVersion "1.0.0"
#define MyAppPublisher "Moses Oghene"
#define MyAppURL "https://github.com/mosesogathe/pdf-page-extractor"
#define MyAppExeName "PDFPageExtractor.exe"
#define NAPS2Version "8.2.1"
#define NAPS2Installer "naps2-8.2.1-win-x64.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
AppId={{A1B2C3D4-E5F6-7890-ABCD-123456789012}}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DisableProgramGroupPage=yes
OutputDir=dist\installer
OutputBaseFilename=PDFPageExtractor-{#MyAppVersion}-with-NAPS2-Setup
ArchitecturesAllowed=x64
ArchitecturesInstallIn64BitMode=x64
SetupIconFile=src\assets\icon.ico
Compression=lzma
SolidCompression=yes
WizardStyle=modern
; Require admin privileges for NAPS2 installation
PrivilegesRequired=admin

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"
Name: "installnaps2"; Description: "Install NAPS2 Scanner Software (Recommended)"; GroupDescription: "Additional Software"

[Files]
Source: "dist\PDFPageExtractor\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "third_party\naps2-8.2.1-win-x64.exe"; DestDir: "{tmp}"; Flags: deleteafterinstall; Tasks: installnaps2

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
Name: "{autoprograms}\NAPS2 Scanner"; Filename: "{autopf}\NAPS2\NAPS2.exe"; Tasks: installnaps2
Name: "{autodesktop}\NAPS2 Scanner"; Filename: "{autopf}\NAPS2\NAPS2.exe"; Tasks: desktopicon installnaps2

[Run]
; Install NAPS2 silently if selected
Filename: "{tmp}\naps2-8.2.1-win-x64.exe"; Parameters: "/VERYSILENT /NORESTART /SUPPRESSMSGBOXES"; WorkingDir: "{tmp}"; Flags: waituntilterminated; Tasks: installnaps2; StatusMsg: "Installing NAPS2 Scanner..."
; Launch PDF Page Extractor after installation
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[UninstallDelete]
Type: filesandordirs; Name: "{app}"

[Code]
procedure InitializeWizard;
begin
  WizardForm.WelcomeLabel2.Caption := 'This will install PDF Page Extractor with optional NAPS2 scanner integration.' + #13#10#13#10 +
    'NAPS2 is a document scanning application that works perfectly with PDF Page Extractor for creating and organizing scanned documents.' + #13#10#13#10 +
    'Click Next to continue, or Cancel to exit Setup.';
end;

function GetUninstallString(): String;
var
  sUnInstPath: String;
  sUnInstallString: String;
begin
  sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1');
  sUnInstallString := '';
  if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
  Result := sUnInstallString;
end;

function IsUpgrade(): Boolean;
begin
  Result := (GetUninstallString() <> '');
end;

function UnInstallOldVersion(): Integer;
var
  sUnInstallString: String;
  iResultCode: Integer;
begin
  Result := 0;
  sUnInstallString := GetUninstallString();
  if sUnInstallString <> '' then begin
    sUnInstallString := RemoveQuotes(sUnInstallString);
    if Exec(sUnInstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then
      Result := 3
    else
      Result := 2;
  end else
    Result := 1;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if (CurStep=ssInstall) then
  begin
    if (IsUpgrade()) then
    begin
      UnInstallOldVersion();
    end;
  end;
end;